name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        image-name: [base, base-2]
        gdal-version: [2.4, 3.1]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install boto3 click
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Common build cache
        uses: actions/cache@v2
        id: common-cache
        with:
          path: /tmp/docker
          key: ${{ matrix.image-name }}-${{ hashFiles(format('common/{0}/Dockerfile', matrix.image-name)) }}

      - name: create base image
        if: steps.common-cache.outputs.cache-hit != 'true'
        run: |
            docker build -f common/${{ matrix.image-name }}/Dockerfile -t ${{ matrix.image-name }}:build .
            mkdir /tmp/docker
            docker image save -o /tmp/docker/${{ matrix.image-name }}.tar ${{ matrix.image-name }}:build

      - name: Restore base image
        if: steps.common-cache.outputs.cache-hit != 'true'
        run: |
            docker image load -i /tmp/docker/${{ matrix.image-name }}.tar
            docker images

      - name: GDAL build Cache
        uses: actions/cache@v2
        id: gdal-cache
        with:
          path: /tmp/docker
          key: gdal${{ matrix.gdal-version }}-${{ hashFiles(format('gdal{0}/Dockerfile', matrix.gdal-version)) }}-${{ hashFiles(format('common/{0}/Dockerfile', matrix.image-name)) }}

      - name: create gdal docker image
        if: steps.gdal-cache.outputs.cache-hit != 'true'
        run: |
            docker build \
                --build-arg IMAGE_VERSION=${{ matrix.image-name }} \
                -f gdal${{ matrix.gdal-version }}/Dockerfile \
                -t lambgeo/lambda-${{ matrix.image-name }}:gdal${{ matrix.gdal-version }} .
            mkdir /tmp/docker
            docker image save \
                -o /tmp/docker/lambda-${{ matrix.image-name }}-gdal${{ matrix.gdal-version }}.tar \
                lambgeo/lambda-${{ matrix.image-name }}:gdal${{ matrix.gdal-version }}

      - name: Restore dependencies
        if: steps.gdal-cache.outputs.cache-hit == 'true'
        run: |
            docker image load -i /tmp/docker/lambda-${{ matrix.image-name }}-gdal${{ matrix.gdal-version }}.tar
            docker images

      - name: Run Tests
        run: |
          docker run \
              -v ${{ github.workspace }}:/local --rm \
              lambgeo/lambda-${{ matrix.image-name }}:gdal${{ matrix.gdal-version }} \
              sh -c "cd /local/tests && sh tests.sh"

      - name: Push to DockerHub
        if: contains(github.ref, 'tags')
        run: docker push lambgeo/lambda-${{ matrix.image-name }}:gdal${{ matrix.gdal-version }}

      - name: Create and Publish Layer
        if: contains(github.ref, 'tags')
        run: |
          docker run \
            -v ${{ github.workspace }}:/local --rm \
            lambgeo/lambda-${{ matrix.image-name }}:gdal${{ matrix.gdal-version }} \
            sh -c "cd /local/scripts && sh create-lambda-layer.sh"

          python scripts/deploy-layer.py package.zip ${{ matrix.gdal-version }} ${{ matrix.image-version }}

base-runtime:
    needs: [build]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    strategy:
      matrix:
        gdal-version: [2.4, 3.1]
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to DockerHub
        env:
            RUNTIMES: "py3.7"
        run: |
          for RUNTIME in ${RUNTIMES}; do
            docker build \
                --build-arg GDAL_VERSION=${{ matrix.gdal-version }} \
                -f runtimes/${RUNTIME} \
                -t lambgeo/lambda-base:gdal${{ matrix.gdal-version }}-${RUNTIME} .

            docker push lambgeo/lambda-base:gdal${{ matrix.gdal-version }}-${RUNTIME}
          done

base-2-runtime:
    needs: [build]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    strategy:
      matrix:
        gdal-version: [2.4, 3.1]
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to DockerHub
        env:
            RUNTIMES: "py3.8"
        run: |
          for RUNTIME in ${RUNTIMES}; do
            docker build \
                --build-arg GDAL_VERSION=${{ matrix.gdal-version }} \
                -f runtimes/${RUNTIME} \
                -t lambgeo/lambda-base-2:gdal${{ matrix.gdal-version }}-${RUNTIME} .

            docker push lambgeo/lambda-base-2:gdal${{ matrix.gdal-version }}-${RUNTIME}
          done
