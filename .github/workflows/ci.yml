name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        image-name: ['base', 'base-2']
        gdal-version: [2.4, 3.1, 3.2]
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: set amazonlinux version
        id: amazonlinux
        run: echo "::set-output name=version::$(echo ${{ matrix.image-name }} | sed -E 's/base(-)?//g' )"
        shell: bash

      - name: setup Common cache
        uses: actions/cache@v2
        id: common-cache
        with:
          path: /tmp/docker
          key: ${{ matrix.image-name }}-${{ hashFiles(format('common/{0}/Dockerfile', matrix.image-name)) }}

      - name: Restore Common image
        if: steps.common-cache.outputs.cache-hit == 'true'
        run: docker image load -i /tmp/docker/${{ matrix.image-name }}.tar

      - name: Build and Cache Common image
        if: steps.common-cache.outputs.cache-hit != 'true'
        run: |
          run: docker build -f common/${{ matrix.image-name }}/Dockerfile -t ${{ matrix.image-name }}:build .
          mkdir -p /tmp/docker
          docker image save -o /tmp/docker/${{ matrix.image-name }}.tar ${{ matrix.image-name }}:build

      - name: setup GDAL cache
        uses: actions/cache@v2
        id: gdal-cache
        with:
          path: /tmp/docker
          key: gdal${{ matrix.gdal-version }}-${{ hashFiles(format('gdal{0}/Dockerfile', matrix.gdal-version)) }}-${{ hashFiles(format('common/{0}/Dockerfile', matrix.image-name)) }}

      - name: Restore gdal image
        if: steps.gdal-cache.outputs.cache-hit == 'true'
        run: docker image load -i /tmp/docker/${{ matrix.image-name }}-gdal${{ matrix.gdal-version }}.tar

      - name:  Build and Cache GDAL image
        if: steps.gdal-cache.outputs.cache-hit != 'true'
        run: |
          docker build \
            --build-arg IMAGE_VERSION=${{ matrix.image-name }} \
            -f gdal${{ matrix.gdal-version }}/Dockerfile \
            -t lambgeo/lambda${{ steps.amazonlinux.outputs.version }}-gdal:${{ matrix.gdal-version }} .
          mkdir -p /tmp/docker
          docker image save \
            -o /tmp/docker/${{ matrix.image-name }}-gdal${{ matrix.gdal-version }}.tar \
            lambgeo/lambda${{ steps.amazonlinux.outputs.version }}-gdal:${{ matrix.gdal-version }}

      - name: Run Tests
        run: |
          docker run \
            -v ${{ github.workspace }}:/local --rm \
            lambgeo/lambda${{ steps.amazonlinux.outputs.version }}-gdal:${{ matrix.gdal-version }} \
            sh -c "cd /local/tests && sh tests.sh"

      - name: Push to DockerHub
        if: contains(github.ref, 'tags')
        run: docker push lambgeo/lambda${{ steps.amazonlinux.outputs.version }}-gdal:${{ matrix.gdal-version }}

  # runtimes:
  #     needs: [build]
  #     runs-on: ubuntu-latest
  #     if: contains(github.ref, 'tags')
  #     strategy:
  #       matrix:
  #         runtimes: [py3.7, py3.8]
  #     steps:
  #       - uses: actions/checkout@v2
  #       - name: Login to DockerHub
  #         uses: docker/login-action@v1
  #         with:
  #           username: ${{ secrets.DOCKERHUB_USERNAME }}
  #           password: ${{ secrets.DOCKERHUB_TOKEN }}

  #       - name: Push to DockerHub
  #         env:
  #             GDAL_VERSIONS: "2.4 3.1 3.2"
  #         run: |
  #           for GDAL_VERSION in ${GDAL_VERSIONS}; do
  #             docker build \
  #               --build-arg GDAL_VERSION=${GDAL_VERSION} \
  #               -f runtimes/${{ matrix.runtimes }} \
  #               -t lambgeo/lambda-gdal:${GDAL_VERSION}-${{ matrix.runtimes }} .
  #             docker push lambgeo/lambda-gdal:${GDAL_VERSION}-${{ matrix.runtimes }}
  #           done
