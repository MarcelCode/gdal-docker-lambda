name: CI

on:
  push:
    paths:
    - '**Dockerfile'
    - 'dockerfiles/runtimes/**'
    - 'scripts/deploy.py'
    - 'scripts/create-layer.sh'
    - 'tests/*'
    branches:
    - master
    tags:
    - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        gdal-version: [3.5]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install boto3 click

      - name: Login to Github
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: setup GDAL cache
        uses: actions/cache@v2
        id: gdal-cache
        with:
          path: /tmp/docker
          key: gdal${{ matrix.gdal-version }}-${{ hashFiles(format('dockerfiles/Dockerfile.{0}', matrix.gdal-version)) }}

      - name: Restore gdal image
        if: steps.gdal-cache.outputs.cache-hit == 'true'
        run: docker image load -i /tmp/docker/gdal${{ matrix.gdal-version }}.tar

      - name:  Build and Cache GDAL image
        if: steps.gdal-cache.outputs.cache-hit != 'true'
        run: |
          docker build \
            -f dockerfiles/Dockerfile.gdal${{ matrix.gdal-version }} \
            -t ghcr.io/${{ github.actor }}/lambda-gdal:${{ matrix.gdal-version }} .
          mkdir -p /tmp/docker
          docker image save \
            -o /tmp/docker/gdal${{ matrix.gdal-version }}.tar \
            ghcr.io/${{ github.actor }}/lambda-gdal:${{ matrix.gdal-version }}

      - name: Run Tests
        run: |
          docker run \
            -v ${{ github.workspace }}:/local --rm \
            ghcr.io/${{ github.actor }}/lambda-gdal:${{ matrix.gdal-version }} \
            sh -c "cd /local/tests && sh tests.sh"

      - name: Build and Deploy layers
        if: github.ref == 'refs/heads/master'
        run: |
          docker run \
            -v ${{ github.workspace }}:/local --rm \
            ghcr.io/${{ github.actor }}/lambda-gdal:${{ matrix.gdal-version }} \
            sh -c "sh /local/scripts/create-layer.sh"

          python scripts/deploy.py ${{ matrix.gdal-version }} --deploy

      - name: Push to registery
        if: github.ref == 'refs/heads/master'
        run: |
          docker push ghcr.io/${{ github.actor }}/lambda-gdal:${{ matrix.gdal-version }}

      - name: Build Runtime and Push to DockerHub
        if: github.ref == 'refs/heads/master'
        run: |
          runtimes='3.8 3.9'
          for runtime in ${runtimes}; do
            docker build \
              --build-arg GDAL_VERSION=${{ matrix.gdal-version }} \
              --build-arg RUNTIME_VERSION=${runtime} \
              -f dockerfiles/runtimes/python \
              -t ghcr.io/${{ github.actor }}/lambda-gdal:${{ matrix.gdal-version }}-python${runtime} .
            docker push ghcr.io/${{ github.actor }}/lambda-gdal:${{ matrix.gdal-version }}-python${runtime}
          done
