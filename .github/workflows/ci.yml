name: CI

on: [push]

jobs:
  base:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        gdal-version: [2.4, 3.1]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install boto3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache deps
        uses: actions/cache@v2
        id: cache-deps
        with:
          path: /tmp/docker
          key: ${{ runner.os }}-cache-gdal${{ matrix.gdal-version }}-${{ hashFiles(format('base/gdal{0}/Dockerfile', matrix.gdal-version)) }}

      - name: create gdal docker image
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
            docker build \
                -f base/gdal${{ matrix.gdal-version }}/Dockerfile \
                -t lambgeo/lambda:gdal${{ matrix.gdal-version }} .
            mkdir /tmp/docker
            docker image save \
                -o /tmp/docker/base-gdal${{ matrix.gdal-version }}.tar \
                lambgeo/lambda:gdal${{ matrix.gdal-version }}

      - name: Restore dependencies
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
            docker image load -i /tmp/docker/base-gdal${{ matrix.gdal-version }}.tar
            docker images

      - name: Run Tests
        run: |
          docker run \
              -v ${{ github.workspace }}:/local --rm \
              lambgeo/lambda:gdal${{ matrix.gdal-version }} \
              sh -c "cd /local/tests && sh tests.sh"

      - name: Push to DockerHub and Publish Layer
        if: contains(github.ref, 'tags')
        run: |
          docker run \
            -v ${{ github.workspace }}:/local --rm \
            lambgeo/lambda:gdal${{ matrix.gdal-version }} \
            sh -c "cd /local/scripts && sh create-lambda-layer.sh"
          docker push lambgeo/lambda:gdal${{ matrix.gdal-version }}

      - name: Build RunTimes images
        env:
            RUNTIMES: "py3.7"
        run: |
          for RUNTIME in ${RUNTIMES}; do
            docker build \
                --build-arg GDAL_VERSION=${{ matrix.gdal-version }} \
                -f base/runtimes/${RUNTIME} \
                -t lambgeo/lambda:gdal${{ matrix.gdal-version }}-${RUNTIME} .
          done
        # docker push lambgeo/lambda:gdal${GDAL_VERSION}-py${PYTHON_VERSION}


# PLACEHOLDER
  # base-2:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       gdal-version: [2.4, 3.1]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}


