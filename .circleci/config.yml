version: 2
common: &common
  machine:
    docker_layer_caching: false 
  working_directory: ~/docker-lambda
  steps:
    - checkout
    - attach_workspace:
        at: ~/docker-lambda
    - run: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
    - run:
        name: create gdal docker image
        command: |
          docker build -f base/gdal${GDAL_VERSION}/Dockerfile -t gdal${GDAL_VERSION} .

    - run:
        name: test image
        command: |
          docker run --name lambda --volume $(pwd)/:/local -itd gdal${GDAL_VERSION} bash
          test=$(docker exec -it lambda bash -c 'cd /local/tests && sh tests.sh')
          docker stop lambda
          docker rm lambda
          if [[ "$test" =~ "OK" ]]; then echo "PASSED"; else exit 1; fi

    - run:
        name: create gdal layer
        command: |
          docker run --name lambda --volume $(pwd)/:/local -itd gdal${GDAL_VERSION} bash
          docker cp ./scripts/create-lambda-layer.sh lambda:/tmp/create-lambda-layer.sh
          docker exec -it lambda bash -c '/tmp/create-lambda-layer.sh'
          docker stop lambda
          docker rm lambda
    
    - run:
        name: push image
        command: |
          if [[ "$CIRCLE_BRANCH" == "master" ]]; then
            docker tag gdal${GDAL_VERSION} lambgeo/lambda:gdal${GDAL_VERSION}
            docker push lambgeo/lambda:gdal${GDAL_VERSION}
          fi

    - run:
        name: create and push python images 
        command: |
          for PYTHON_VERSION in ${PYTHON_VERSIONS}; do
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              docker build --build-arg PYTHON_VERSION=${PYTHON_VERSION} --build-arg GDAL_VERSION=${GDAL_VERSION} -f base/python/Dockerfile -t lambgeo/lambda:gdal${GDAL_VERSION}-py${PYTHON_VERSION} .
              docker push lambgeo/lambda:gdal${GDAL_VERSION}-py${PYTHON_VERSION}
            fi
          done

    - persist_to_workspace:
        root: .
        paths:
          - gdal*.zip

jobs:
  "gdal-3.1":
    <<: *common
    environment:
      - GDAL_VERSION=3.1
      - PYTHON_VERSIONS=3.7

  "gdal-3.0":
    <<: *common
    environment:
      - GDAL_VERSION=3.0
      - PYTHON_VERSIONS=3.7

  "gdal-2.4":
    <<: *common
    environment:
      - GDAL_VERSION=2.4
      - PYTHON_VERSIONS=3.7

  "deploy":
    docker:
      - image: circleci/python:3.7.2
        environment:
          - GDAL_VERSIONS=2.4 3.0 3.1
    working_directory: ~/amazonlinux
    steps:
      - checkout
      - attach_workspace:
          at: ~/amazonlinux
      - run:
          name: install boto3
          command: sudo pip install boto3 click
      - run:
          name: Deploy Layer
          command: |
            for GDAL_VERSION in ${GDAL_VERSIONS}; do
              python scripts/deploy-layer.py $GDAL_VERSION
            done

workflows:
  version: 2
  build_and_push:
    jobs:
      - "gdal-3.1"
      - "gdal-3.0"
      - "gdal-2.4"
      - deploy:
          requires:
            - "gdal-3.1"
            - "gdal-3.0"
            - "gdal-2.4"
          filters:
            branches:
              only:
                - master
